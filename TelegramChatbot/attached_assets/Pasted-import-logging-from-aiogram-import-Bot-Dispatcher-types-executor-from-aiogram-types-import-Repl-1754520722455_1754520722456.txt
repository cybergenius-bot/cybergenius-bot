import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

API_TOKEN = '8211732426:AAEoyGa3MrFuFi4ySDgaGGQSEtboVAEL82Q'

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
categories = {
    "üß± –°—Ç—Ä–æ–π–∫–∞": 10,
    "üíû –û—Ç–Ω–æ—à–µ–Ω–∏—è": 15,
    "üíº –ë–∏–∑–Ω–µ—Å": 15,
    "üí° –ñ–∏–∑–Ω—å": 10,
    "üî• –°–µ–∫—Å": 30,
    "üß† –î—Ä—É–≥–æ–µ": 15,
}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu.add(*[KeyboardButton(cat) for cat in categories.keys()])

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = user_data.get(user_id, {"free_questions": 2})
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ö–∏–±–µ—Ä–ì–µ–Ω–∏–π ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ª—é–±–æ–π —Ç–µ–º–µ.\n\n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å. –ü–µ—Ä–≤—ã–µ 2 –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω–æ!", reply_markup=main_menu)

@dp.message_handler(lambda message: message.text in categories)
async def category_selected(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]["category"] = message.text
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {message.text}\n–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:")

@dp.message_handler()
async def handle_question(message: types.Message):
    user_id = message.from_user.id
    user = user_data.get(user_id, {"free_questions": 2})
    category = user.get("category")

    if not category:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.", reply_markup=main_menu)
        return

    if user["free_questions"] > 0:
        user["free_questions"] -= 1
        await message.answer(f"‚úÖ –í–æ–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! –í–æ—Ç —Ç–≤–æ–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ —Ç–µ–º–µ {category.lower()}:")
        await message.answer("(–∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –±–æ—Ç–∞)")
    else:
        price = categories[category]
        await message.answer(f"üí∞ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category.lower()} ‚Äî {price} ‚Ç™.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
