import logging
import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from config import API_TOKEN, CATEGORIES, FREE_QUESTIONS_COUNT, CATEGORY_RESPONSES

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_data = {}

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"""
    category_buttons = [[KeyboardButton(text=cat)] for cat in CATEGORIES.keys()]
    main_menu = ReplyKeyboardMarkup(keyboard=category_buttons, resize_keyboard=True)
    return main_menu

# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def create_back_menu():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    back_menu = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], 
        resize_keyboard=True
    )
    return back_menu

def get_user_data(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ"""
    if user_id not in user_data:
        user_data[user_id] = {
            "free_questions": FREE_QUESTIONS_COUNT,
            "category": None,
            "total_questions": 0
        }
    return user_data[user_id]

def generate_smart_response(category, question):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        responses = CATEGORY_RESPONSES.get(category, CATEGORY_RESPONSES["üß† –î—Ä—É–≥–æ–µ"])
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç
        base_response = random.choice(responses)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –≤–æ–ø—Ä–æ—Å–µ
        question_lower = question.lower()
        
        additional_tips = []
        
        # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        if any(word in question_lower for word in ["–∫–∞–∫", "—á—Ç–æ –¥–µ–ª–∞—Ç—å", "–ø–æ–º–æ–≥–∏—Ç–µ", "—Å–æ–≤–µ—Ç"]):
            additional_tips.append("üí° –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—à–∞–≥–æ–≤–æ —Ä–∞–∑–±–∏—Ç—å –∑–∞–¥–∞—á—É –Ω–∞ –±–æ–ª–µ–µ –º–µ–ª–∫–∏–µ —á–∞—Å—Ç–∏.")
        
        if any(word in question_lower for word in ["–ø—Ä–æ–±–ª–µ–º–∞", "—Å–ª–æ–∂–Ω–æ", "–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è"]):
            additional_tips.append("üîß –ò–Ω–æ–≥–¥–∞ —Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å –ø–∞—É–∑—É –∏ –ø–æ–¥–æ–π—Ç–∏ –∫ –≤–æ–ø—Ä–æ—Å—É —Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.")
        
        if any(word in question_lower for word in ["–¥–µ–Ω—å–≥–∏", "–±—é–¥–∂–µ—Ç", "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ü–µ–Ω–∞"]):
            additional_tips.append("üí∞ –ü—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞ –≤—Å–µ–≥–¥–∞ –∑–∞–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤ –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã.")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        response_parts = [f"üìù **–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:**", f'"{question}"', "", f"‚úÖ **–ú–æ–π –æ—Ç–≤–µ—Ç:**", base_response]
        
        if additional_tips:
            response_parts.extend(["", "üéØ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**"] + additional_tips)
        
        return "\n".join(response_parts)
        
    except Exception as e:
        logger.error(f"Error generating response: {e}")
        return f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}! –Ø –æ–±—Ä–∞–±–æ—Ç–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –¥–∞–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª—É—á—à–∏—Ö –ø—Ä–∞–∫—Ç–∏–∫ –≤ –¥–∞–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏."

@dp.message(Command('start'))
async def start_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = message.from_user.id
        user = get_user_data(user_id)
        
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ö–∏–±–µ—Ä–ì–µ–Ω–∏–π ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –ª—é–±–æ–π —Ç–µ–º–µ.\n\n"
            f"üéÅ –£ —Ç–µ–±—è –µ—Å—Ç—å {user['free_questions']} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞!\n\n"
            "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å:"
        )
        
        await message.answer(welcome_text, reply_markup=create_main_menu())
        logger.info(f"User {user_id} started the bot")
        
    except Exception as e:
        logger.error(f"Error in start_handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(lambda message: message.text and message.text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def main_menu_handler(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        user_id = message.from_user.id
        user = get_user_data(user_id)
        user["category"] = None
        
        await message.answer(
            f"üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {user['free_questions']}\n–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {user['total_questions']}\n\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=create_main_menu()
        )
        
    except Exception as e:
        logger.error(f"Error in main_menu_handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(lambda message: message.text and message.text in CATEGORIES)
async def category_selected(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        user_id = message.from_user.id
        user = get_user_data(user_id)
        user["category"] = message.text
        
        price = CATEGORIES[message.text]
        
        if user["free_questions"] > 0:
            response_text = (
                f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: **{message.text}**\n\n"
                f"üíù –≠—Ç–æ –±—É–¥–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å (–æ—Å—Ç–∞–ª–æ—Å—å: {user['free_questions']})\n\n"
                "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:"
            )
        else:
            response_text = (
                f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –≤—ã–±—Ä–∞–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—é: **{message.text}**\n\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: {price} ‚Ç™\n\n"
                "–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å:"
            )
        
        await message.answer(response_text, reply_markup=create_back_menu())
        logger.info(f"User {user_id} selected category: {message.text}")
        
    except Exception as e:
        logger.error(f"Error in category_selected: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(Command('help'))
async def help_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = (
        "ü§ñ **–ö–∏–±–µ—Ä–ì–µ–Ω–∏–π - –ü–æ–º–æ—â—å**\n\n"
        "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n\n"
        "**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –º–µ–Ω—é\n"
        "2. –ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç\n\n"
        "**–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ü–µ–Ω—ã:**\n"
    )
    
    for category, price in CATEGORIES.items():
        help_text += f"{category}: {price} ‚Ç™\n"
    
    await message.answer(help_text, reply_markup=create_main_menu())

@dp.message(Command('stats'))
async def stats_handler(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        user = get_user_data(user_id)
        
        stats_text = (
            f"üìä **–¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n\n"
            f"üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å: {user['free_questions']}\n"
            f"üìù –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {user['total_questions']}\n"
            f"üìÇ –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {user.get('category', '–ù–µ –≤—ã–±—Ä–∞–Ω–∞')}"
        )
        
        await message.answer(stats_text, reply_markup=create_main_menu())
        
    except Exception as e:
        logger.error(f"Error in stats_handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@dp.message()
async def handle_question(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        user_id = message.from_user.id
        user = get_user_data(user_id)
        category = user.get("category")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
        if not category:
            await message.answer(
                "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.",
                reply_markup=create_main_menu()
            )
            return
        
        question_text = message.text
        if not question_text:
            await message.answer(
                "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.",
                reply_markup=create_back_menu()
            )
            return
            
        question = question_text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –≤–æ–ø—Ä–æ—Å–∞
        if len(question) < 5:
            await message.answer(
                "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –≤–æ–ø—Ä–æ—Å (–º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤).",
                reply_markup=create_back_menu()
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
        if user["free_questions"] > 0:
            # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            user["free_questions"] -= 1
            user["total_questions"] += 1
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω—ã–π –æ—Ç–≤–µ—Ç
            smart_response = generate_smart_response(category, question)
            
            await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
            await message.answer(smart_response, reply_markup=create_back_menu())
            
            if user["free_questions"] > 0:
                await message.answer(
                    f"üéÅ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {user['free_questions']} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤!",
                    reply_markup=create_back_menu()
                )
            else:
                await message.answer(
                    "üéØ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –°–ª–µ–¥—É—é—â–∏–µ –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –ø–ª–∞—Ç–Ω—ã–º–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–∞—Ä–∏—Ñ–∞–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π.",
                    reply_markup=create_back_menu()
                )
            
            logger.info(f"User {user_id} asked free question in {category}")
            
        else:
            # –ü–ª–∞—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            price = CATEGORIES[category]
            user["total_questions"] += 1
            
            await message.answer(
                f"üí∞ **–ü–ª–∞—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç**\n\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} ‚Ç™\n\n"
                f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É.\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ö–∏–±–µ—Ä–ì–µ–Ω–∏—è.\n\n"
                f"üìû –î–ª—è –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=create_back_menu()
            )
            
            logger.info(f"User {user_id} asked paid question in {category} (price: {price})")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        user["category"] = None
        
    except Exception as e:
        logger.error(f"Error in handle_question: {e}")
        await message.answer(
            "‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=create_main_menu()
        )

async def on_startup():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("Bot started successfully!")

async def on_shutdown():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("Bot stopped!")

async def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        logger.info("Starting KyberGenius Telegram Bot...")
        await on_startup()
        await dp.start_polling(bot, skip_updates=True)
    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        raise
    finally:
        await on_shutdown()
